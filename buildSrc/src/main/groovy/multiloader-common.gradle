plugins {
  id "java-library"
  id "maven-publish"
}

base {
  archivesName = "${mod_id}-${project.name}-${mod_version}+${minecraft_version}"
}

java {
  toolchain.languageVersion = JavaLanguageVersion.of(java_version)
  withSourcesJar()
  withJavadocJar()
}

repositories {
  mavenCentral()
  exclusiveContent {
    forRepository {
      maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/repository/maven-public"
      }
    }
    filter { includeGroupAndSubgroups("org.spongepowered") }
  }
  maven {
    name = "BlameJared"
    url = "https://maven.blamejared.com"
  }
}

["apiElements", "runtimeElements", "sourcesElements", "javadocElements"].each { variant ->
  configurations."$variant".outgoing {
    capability("$maven_group:${project.name}:$mod_version")
    capability("$maven_group:${base.archivesName.get()}:$mod_version")
    capability("$maven_group:$mod_id-${project.name}-${minecraft_version}:$mod_version")
    capability("$maven_group:$mod_id:$mod_version")
  }
  publishing.publications.configureEach {
    suppressPomMetadataWarningsFor(variant)
  }
}

sourcesJar {
  from(rootProject.file("COPYING")) {
    rename { "${it}_${mod_name}" }
  }
  from(rootProject.file("COPYING.LESSER")) {
    rename { "${it}_${mod_name}" }
  }
}

jar {
  from(rootProject.file("COPYING")) {
    rename { "${it}_${mod_name}" }
  }
  from(rootProject.file("COPYING.LESSER")) {
    rename { "${it}_${mod_name}" }
  }

  manifest {
    attributes([
      "Specification-Title"   : mod_name,
      "Specification-Vendor"  : mod_author,
      "Specification-Version" : project.jar.archiveVersion,
      "Implementation-Title"  : project.name,
      "Implementation-Version": project.jar.archiveVersion,
      "Implementation-Vendor" : mod_author,
      "Built-On-Minecraft"    : minecraft_version
    ])
  }
}

processResources {
  var expandProps = [
    "java_version"         : java_version,
    "license"              : license,
    "maven_group"          : project.maven_group,
    "minecraft_version"    : minecraft_version,
    "mod_author"           : mod_author,
    "mod_description"      : mod_description,
    "mod_id"               : mod_id,
    "mod_name"             : mod_name,
    "mod_version"          : mod_version,
    "cloth_config_version" : cloth_config_version,
    "fabric_version"       : fabric_version,
    "fabric_loader_version": fabric_loader_version,
    "fabric_loom_version"  : fabric_loom_version,
    "yarn_mappings"        : yarn_mappings,
    "mod_menu_version"     : mod_menu_version
  ]

  var jsonExpandProps = expandProps.collectEntries {
    key, value -> [(key): value instanceof String ? value.replace("\n", "\\\\n") : value]
  }

  filesMatching(["pack.mcmeta", "fabric.mod.json", "*.mixins.json"]) {
    expand jsonExpandProps
  }

  inputs.properties(expandProps)
}

publishing {
  publications {
    register("mavenJava", MavenPublication) {
      artifactId base.archivesName.get()
      from components.java
    }
  }
  repositories {
    maven {
      url System.getenv("local_maven_url")
    }
  }
}
